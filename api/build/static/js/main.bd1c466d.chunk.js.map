{"version":3,"sources":["logo.svg","components/userform.js","components/editRecipe.js","components/displayRecipe.js","components/recipeList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","React","Component","EditRecipe","props","state","currTitle","title","currIngredient","value","this","setState","setTitle","submitIngred","updateIngredient","index","removeIngred","onChange","e","updateTitle","target","placeholder","style","display","ingredients","map","onClick","type","submitNewIngred","DisplayRecipe","RecipeList","cuisine","ingredientList","isEdit","updateCuisine","bind","submitNewIngredient","removeIngredient","concat","removeIndex","filter","elem","edit","updateEdit","App","className","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bd1c466d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\n\r\nclass UserForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            name: '',\r\n            password: '',\r\n        }\r\n    }\r\n    updatePassword(value) {\r\n        this.setState({\r\n            password: value,\r\n        });\r\n    }\r\n    updateName(value) {\r\n        this.setState({\r\n            name: value,\r\n        });\r\n    }\r\n\r\n    submit() {\r\n        //submits form either to login or sign up\r\n        //then redirects to homepage.\r\n    }\r\n    render() {\r\n        const borderStyle = {border: \"1px dotted white\"}\r\n        const formInputstyle = {display:\"block\", width: \"100%\"};\r\n        return (\r\n            <div style={borderStyle}>\r\n                <h1>My Simple Form</h1>\r\n                <form>\r\n                    <label for=\"username\">Username</label>\r\n                    <input type=\"text\" name=\"username\" onChange={(e)=>{this.updateName(e.target.value)}} style={formInputstyle}/>\r\n                    <label for =\"password\">Password</label>\r\n                    <input type=\"password\" name=\"password\" onChange={(e)=>{this.updatePassword(e.target.value)}} style={formInputstyle}/>\r\n                    \r\n                    <button onClick={()=>this.submit()}>Submit</button>\r\n                </form>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default UserForm;","import React from 'react';\r\n\r\nexport default class EditRecipe extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currTitle: this.props.title,\r\n            currIngredient: '',\r\n        }\r\n    }\r\n\r\n    updateTitle(value) {\r\n        this.setState({\r\n            currTitle: value,\r\n        })\r\n    }\r\n\r\n    updateIngredient(value) {\r\n        this.setState({\r\n            currIngredient: value\r\n        })\r\n    }\r\n\r\n    submitNewIngred() {\r\n        this.props.setTitle(this.state.currTitle);\r\n        this.props.submitIngred(this.state.currIngredient);\r\n        this.updateIngredient(\"\");\r\n    }\r\n\r\n    removeIngred(index) {\r\n        this.props.removeIngred(index);\r\n    }\r\n    render() {\r\n        const blockStyle = {display: \"block\"}\r\n        return (\r\n            <div >\r\n                <input onChange={(e)=>this.updateTitle(e.target.value)} placeholder={this.props.title} style={blockStyle}/>\r\n                <ol>\r\n                   {this.props.ingredients.map((value, index) => {\r\n                       return <li>{value} <button onClick={()=>this.removeIngred(index)}>X</button></li>  \r\n                   })} \r\n                </ol>\r\n\r\n                <input \r\n                    onChange={(e)=>this.updateIngredient(e.target.value)} \r\n                    placeholder=\"Add new ingredient!\" \r\n                    value = {this.state.currIngredient}\r\n                    type=\"text\"\r\n                    />\r\n                <button type=\"button\" onClick={()=>this.submitNewIngred()} >Add!</button>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\n\r\nexport default class DisplayRecipe extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>{this.props.title}</h1>\r\n                <ol>\r\n                    {this.props.ingredients.map((value) => {\r\n                        return <li>{value}</li>\r\n                    })}\r\n                </ol>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport EditRecipe from './editRecipe';\r\nimport DisplayRecipe from './displayRecipe';\r\nexport default class RecipeList extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            cuisine: '',\r\n            ingredientList: [],\r\n            isEdit: true,\r\n        }\r\n        this.updateCuisine = this.updateCuisine.bind(this);\r\n        this.submitNewIngredient = this.submitNewIngredient.bind(this);\r\n        this.removeIngredient = this.removeIngredient.bind(this);\r\n    }\r\n\r\n    updateCuisine(value) {\r\n        this.setState({\r\n                cuisine: value,\r\n        })\r\n    }\r\n\r\n    submitNewIngredient(value) {\r\n        this.setState(state=> {\r\n            const ingredientList = state.ingredientList.concat(value);\r\n            return {ingredientList,}\r\n        })\r\n    }\r\n\r\n    updateEdit() {\r\n        this.setState(state => ({isEdit: !state.isEdit,}\r\n        ))\r\n    }\r\n\r\n    removeIngredient(removeIndex) {\r\n        this.setState(state => ({ingredientList: this.state.ingredientList.filter((elem, index) => index != removeIndex)}))\r\n    }\r\n\r\n    render() {\r\n        const edit = <EditRecipe \r\n                        setTitle={this.updateCuisine} \r\n                        submitIngred={this.submitNewIngredient}\r\n                        title = {this.state.cuisine}\r\n                        ingredients = {this.state.ingredientList}\r\n                        removeIngred = {this.removeIngredient}\r\n                        />;\r\n        const display = <DisplayRecipe title={this.state.cuisine} ingredients={this.state.ingredientList}/>;\r\n        return (\r\n            <div>\r\n                {(this.state.isEdit) ?  edit : display}\r\n                <button onClick={()=>this.updateEdit()}>{this.state.isEdit ? \"Display\" : \"Edit\"}</button>\r\n                <button type=\"submit\" value=\"Submit!\">Submit!</button>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport LoginForm from './components/loginform.js';\n\nimport RecipeList from './components/recipeList.js';\n//<LoginForm/>\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <RecipeList/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}